# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/lru_redux/all/lru_redux.rbi
#
# lru_redux-1.1.0
module LruRedux
end
module LruRedux::Util
end
module LruRedux::Util::SafeSync
  def [](key); end
  def []=(key, value); end
  def clear; end
  def count; end
  def delete(key); end
  def each; end
  def evict(key); end
  def fetch(key); end
  def getset(key); end
  def has_key?(key); end
  def initialize(*args); end
  def key?(key); end
  def max_size=(max_size); end
  def to_a; end
  def ttl=(ttl); end
  def valid?; end
  include MonitorMixin
end
class LruRedux::Cache
  def [](key); end
  def []=(key, val); end
  def clear; end
  def count; end
  def delete(key); end
  def each; end
  def each_unsafe; end
  def evict(key); end
  def fetch(key); end
  def getset(key); end
  def has_key?(key); end
  def initialize(*args); end
  def key?(key); end
  def max_size=(max_size); end
  def to_a; end
  def ttl=(_); end
  def valid?; end
end
class LruRedux::ThreadSafeCache < LruRedux::Cache
  include LruRedux::Util::SafeSync
end
module LruRedux::TTL
end
class LruRedux::TTL::Cache
  def [](key); end
  def []=(key, val); end
  def clear; end
  def count; end
  def delete(key); end
  def each; end
  def each_unsafe; end
  def evict(key); end
  def expire; end
  def fetch(key); end
  def getset(key); end
  def has_key?(key); end
  def initialize(*args); end
  def key?(key); end
  def max_size; end
  def max_size=(max_size); end
  def resize; end
  def to_a; end
  def ttl; end
  def ttl=(ttl); end
  def ttl_evict; end
  def valid?; end
end
class LruRedux::TTL::ThreadSafeCache < LruRedux::TTL::Cache
  include LruRedux::Util::SafeSync
end
